---
import Layout from "../../layouts/LayoutRigth.astro";
import CustomPdfInput from "../../components/customInput/CustomPdfInput.svelte";
export const prerender = false;

import "../../styles/global.css";
import GastosCheckDinamic from "../../components/GastosCheckDinamic.svelte";
const idsSubprocesos = [7, 8, 9]; // IDs de subprocesos a actualizar
const IdProcesoDia = Astro.url.searchParams.get('Id');

---

<Layout title="Movimientos de caja" idsSubprocesos={idsSubprocesos} IdProcesoDia={IdProcesoDia}>
  <div class="mx-auto p-4 space-y-6 bg-white rounded-md shadow-md mt-1">
    <!-- Encabezado
    <div class="flex flex-col space-y-1">
      <h1 class="text-xl font-semibold text-gray-800">
        Movimientos de caja <span class="text-gray-500"
          >(06/03/2025 - P1-C3)</span
        >
      </h1>
      <p class="text-sm text-gray-500">
        3 Registros. Mostrando todos los registros.
      </p>
    </div> -->

    <!-- Tabla: Movimientos de caja -->
    <div class="overflow-x-auto border border-gray-300 rounded-lg shadow-sm">
      <table class="min-w-full text-sm text-center text-gray-800">
        <caption class="text-base font-semibold text-gray-900 py-2">Resultados de Movimientos</caption>
        <thead class="bg-gray-100 text-gray-700 uppercase text-xs">
          <tr>
            <th class="px-4 py-2 font-medium">Pago/Cobro</th>
            <th class="px-4 py-2 font-medium">Documento</th>
            <th class="px-4 py-2 font-medium">Importe</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200">
          <tr>
            <td class="px-4 py-2">41-RETIRADA DE EFECTIVO</td>
            <td class="px-4 py-2">?</td>
            <td class="px-4 py-2 text-green-600">261.240.00$</td>
          </tr>
          <tr>
            <td class="px-4 py-2">03-FAJILLAS BILLETES</td>
            <td class="px-4 py-2">?</td>
            <td class="px-4 py-2 text-red-600">-261.240.00$</td>
          </tr>
          <tr>
            <td class="px-4 py-2">40-DEPOSITO COMETRA</td>
            <td class="px-4 py-2">?</td>
            <td class="px-4 py-2 text-red-600">-261,240.00$</td>
          </tr>
        </tbody>
        <tfoot class="bg-gray-50">
          <tr>
            <td colspan="2" class="px-4 py-2 font-semibold text-center">Total:</td>
            <td class="px-4 py-2 font-bold text-red-600">-261,240.00$</td>
          </tr>
        </tfoot>
      </table>
    </div>

    <!-- Aquí irá el componente de gastos dinámico -->
    <GastosCheckDinamic client:visible/>

    <!-- Sección: Inputs de archivos + Nota -->
    <div class="mt-10 grid grid-cols-1 md:grid-cols-2 gap-6">
      <!-- Columna Izquierda: Dos inputs de archivo -->
      <div class="space-y-4">
        <!-- Subir archivo 1 -->
        <CustomPdfInput inputId="input-talon-ticket-corte" label="Talon de banco y ticket bancario" client:visible />


      </div>

      <!-- Columna Derecha: Nota informativa -->
      <div
        class="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-md shadow-sm h-full"
      >
        <h3 class="text-yellow-800 font-semibold mb-2">Nota:</h3>
        <ol class="list-decimal pl-5 space-y-1 text-sm text-gray-700">
          <li>Fecha</li>
          <li>Número de folio</li>
          <li>Monto</li>
          <li>Firma del gerente y de quien recogió el efectivo</li>
          <li>Talón de banco con información completa</li>
        </ol>
      </div>
    </div>
  </div>

  <!-- El modal general ha sido eliminado ya que ahora cada input tiene su propio modal -->

  <script type="module">
    // Función para configurar los eventos de un input y su modal
    function setupPdfInput(
      inputId,
      modalId,
      viewerId,
      openModalBtnId,
      verPdfBtnId,
      confirmBtnId,
      cancelBtnId,
      punto1Id,
      punto2Id,
    ) {
      const input = document.getElementById(inputId);
      const modal = document.getElementById(modalId);
      const viewer = document.getElementById(viewerId);
      const openModalBtn = document.getElementById(openModalBtnId);
      const verPdfBtn = document.getElementById(verPdfBtnId);
      const confirmBtn = document.getElementById(confirmBtnId);
      const cancelBtn = document.getElementById(cancelBtnId);
      const punto1 = document.getElementById(punto1Id);
      const punto2 = document.getElementById(punto2Id);

      let pdfDataUrl = null;

      // Manejar la carga del archivo PDF
      if (input) {
        input.addEventListener("change", function (e) {
          const file = e.target.files[0];
          if (file && file.type === "application/pdf") {
            // Actualizar estado visual
            if (
              inputId === "input-gastos" &&
              document.getElementById("estado-gastos")
            ) {
              document.getElementById("estado-gastos").textContent = "Cargado";
              document.getElementById("estado-gastos").className =
                "text-sm text-green-500";
              document
                .getElementById("check-gastos-icon")
                .classList.remove("hidden");
            }

            // Actualizar puntos de estado si existen
            if (punto1) punto1.className = "w-2 h-2 rounded-full bg-green-500";

            // Abrir modal automáticamente al cargar
            if (modal) {
              // Siempre mostrar el PDF de prueba primero
              viewer.src = "/assets/simulacion.pdf";
              modal.showModal();
            }

            // Crear URL para el PDF (para uso posterior si se necesita)
            const reader = new FileReader();
            reader.onload = function (e) {
              pdfDataUrl = e.target.result;
            };
            reader.readAsDataURL(file);
          } else if (file) {
            alert("Por favor, selecciona solo archivos PDF");
            input.value = "";
            if (punto1) punto1.className = "w-2 h-2 rounded-full bg-red-500";
          }
        });
      }

      // Abrir modal al hacer clic en el área del input
      if (openModalBtn && modal) {
        openModalBtn.addEventListener("click", function () {
          modal.showModal();
        });
      }

      // Ver PDF al hacer clic en el botón
      if (verPdfBtn && modal) {
        verPdfBtn.addEventListener("click", function () {
          // Si hay un PDF cargado, mostrar ese, sino mostrar el de simulación
          if (pdfDataUrl && viewer) {
            viewer.src = pdfDataUrl;
          }
          modal.showModal();
        });
      }

      // Confirmar PDF
      if (confirmBtn && modal) {
        confirmBtn.addEventListener("click", function () {
          // Marcar como confirmado
          if (punto2) punto2.className = "w-2 h-2 rounded-full bg-green-500";
          if (
            inputId === "input-gastos" &&
            document.getElementById("estado-gastos")
          ) {
            document.getElementById("estado-gastos").textContent = "Confirmado";
          }
          modal.close();
        });
      }

      // Cancelar
      if (cancelBtn && modal) {
        cancelBtn.addEventListener("click", function () {
          modal.close();
        });
      }
    }

    // Configurar el checkbox de gastos
    const checkGastos = document.getElementById("check-gastos");
    const seccionGastos = document.getElementById("seccion-gastos");

    if (checkGastos && seccionGastos) {
      checkGastos.addEventListener("change", (e) => {
        if (e.target.checked) {
          seccionGastos.classList.remove("hidden");
        } else {
          seccionGastos.classList.add("hidden");
        }
      });
    }

    // Configurar los inputs con sus modales
    document.addEventListener("DOMContentLoaded", () => {
      // Configurar input de gastos
      setupPdfInput(
        "input-gastos",
        "modal-gastos",
        "pdf-viewer-gastos",
        "open-modal-gastos",
        "ver-pdf-gastos",
        "confirm-gastos",
        "cancel-gastos",
        null,
        null,
      );

      // Configurar input de turno 1
      setupPdfInput(
        "input-turno1",
        "modal-turno1",
        "pdf-viewer-turno1",
        "open-modal-turno1",
        "ver-pdf-turno1",
        "confirm-turno1",
        "cancel-turno1",
        "punto1-turno1",
        "punto2-turno1",
      );
    });
  </script>
</Layout>
