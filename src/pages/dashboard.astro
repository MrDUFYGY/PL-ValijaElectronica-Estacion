---
export const prerender = false;

import Layout from '../layouts/Layout.astro';
import StationSelector from '../components/StationSelector.svelte';



// 1. Obtener los datos de la sesión desde el middleware
const { SessionTotal } = Astro.locals;

let userId = 'Usuario';
let nickname = '';
let stations = '';

// 2. Si no hay datos o la sesión no fue exitosa, no renderizar el contenido principal.
if (SessionTotal && SessionTotal.Exitoso) {
  // 3. Extraer los datos validados del usuario
  const { resultValidated } = SessionTotal;
  const { userObj } = resultValidated;
  userId = userObj.c_Nombre;
  nickname = userObj.c_NickName;
  stations = resultValidated.stations;
}

---

<Layout title="Estacion | Dia">
  <main class="p-4 sm:p-8">
    {(!SessionTotal || !SessionTotal.Exitoso) ? (
      <div class="text-red-500">
        <h1 class="text-2xl font-bold">Error de Sesión</h1>
        <p>No se pudieron cargar los datos de la sesión. Revisa la consola del servidor para más detalles.</p>
      </div>
    ) : (
      <>
        <h1 id="welcome-heading" class="text-2xl font-bold text-white">Bienvenido, {userId} </h1>
        <p class="text-gray-100 mb-6">Por favor, selecciona una estación para continuar.</p>
        
        <div id="station-selector-container">
          <StationSelector {stations} {nickname} client:load />
        </div>
      </>
    )}
  </main>
</Layout>



<!-- <script is:inline>
  // Función que se ejecuta cuando el DOM está listo.
  async function onPageLoad() {
    console.log('[DASHBOARD] Script inline INICIADO.');

    // 1. Obtener el nickname desde localStorage.
    const nickname = localStorage.getItem('nickname');
    if (!nickname) {
      console.error('[DASHBOARD] Nickname no encontrado en localStorage. No se puede continuar.');
      return;
    }

    // 2. Llamar a nuestro proxy de Astro para obtener los datos.
    try {
      console.log(`[DASHBOARD] Buscando datos para el nickname: ${nickname}`);
      const response = await fetch(`/api/getUserData?nickname=${nickname}`);
      
      if (!response.ok) {
        // Si la API falla, mostramos el error en la consola.
        const errorText = await response.text();
        throw new Error(`Error en la respuesta de la API: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const userData = await response.json();
      console.log('[DASHBOARD] Datos del usuario recibidos:', userData);

      // 3. Actualizar la UI (el saludo).
      const heading = document.getElementById('welcome-heading');
      if (heading && userData.c_Nombre) {
        heading.textContent = `Bienvenido, ${userData.c_Nombre} ${userData.c_ApellidoPat} ${userData.c_ApellidoMat}`;
      }

      // 4. Guardar los datos en sessionStorage para la siguiente página.
      sessionStorage.setItem('userData', JSON.stringify(userData));
      console.log('[DASHBOARD] Datos del usuario guardados en sessionStorage. Proceso completado.');

    } catch (error) {
      console.error('[DASHBOARD] Fallo CRÍTICO al obtener los datos del usuario:', error);
      const heading = document.getElementById('welcome-heading');
      if(heading) {
        heading.textContent = 'No se pudieron cargar los detalles del usuario.';
      }
    }
  }

  // Nos aseguramos de que el script se ejecute después de que la página se haya cargado.
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', onPageLoad);
  } else {
    onPageLoad();
  }
</script> -->